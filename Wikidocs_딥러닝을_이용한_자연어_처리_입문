import numpy as np
import pandas as pd
import re
import matplotlib.pyplot as plt
import nltk
from nltk.corpus import stopwords
from bs4 import BeautifulSoup
import tensorflow as tf
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
import urllib.request


def preprocess_sentence(sentence, remove_stopwords = True):
    
    contractions = {"ain't": "is not", "aren't": "are not","can't": "cannot", "'cause": "because", "could've": "could have", "couldn't": "could not", "didn't": "did not",  "doesn't": "does not", "don't": "do not", "hadn't": "had not", "hasn't": "has not", "haven't": "have not", "he'd": "he would","he'll": "he will", "he's": "he is", "how'd": "how did", "how'd'y": "how do you", "how'll": "how will", "how's": "how is", "I'd": "I would", "I'd've": "I would have", "I'll": "I will", "I'll've": "I will have","I'm": "I am", "I've": "I have", "i'd": "i would", "i'd've": "i would have", "i'll": "i will",  "i'll've": "i will have","i'm": "i am", "i've": "i have", "isn't": "is not", "it'd": "it would", "it'd've": "it would have", "it'll": "it will", "it'll've": "it will have","it's": "it is", "let's": "let us", "ma'am": "madam", "mayn't": "may not", "might've": "might have","mightn't": "might not","mightn't've": "might not have", "must've": "must have", "mustn't": "must not", "mustn't've": "must not have", "needn't": "need not", "needn't've": "need not have","o'clock": "of the clock", "oughtn't": "ought not", "oughtn't've": "ought not have", "shan't": "shall not", "sha'n't": "shall not", "shan't've": "shall not have", "she'd": "she would", "she'd've": "she would have", "she'll": "she will", "she'll've": "she will have", "she's": "she is", "should've": "should have", "shouldn't": "should not", "shouldn't've": "should not have", "so've": "so have","so's": "so as", "this's": "this is","that'd": "that would", "that'd've": "that would have", "that's": "that is", "there'd": "there would", "there'd've": "there would have", "there's": "there is", "here's": "here is","they'd": "they would", "they'd've": "they would have", "they'll": "they will", "they'll've": "they will have", "they're": "they are", "they've": "they have", "to've": "to have", "wasn't": "was not", "we'd": "we would", "we'd've": "we would have", "we'll": "we will", "we'll've": "we will have", "we're": "we are", "we've": "we have", "weren't": "were not", "what'll": "what will", "what'll've": "what will have", "what're": "what are", "what's": "what is", "what've": "what have", "when's": "when is", "when've": "when have", "where'd": "where did", "where's": "where is", "where've": "where have", "who'll": "who will", "who'll've": "who will have", "who's": "who is", "who've": "who have", "why's": "why is", "why've": "why have", "will've": "will have", "won't": "will not", "won't've": "will not have", "would've": "would have", "wouldn't": "would not", "wouldn't've": "would not have", "y'all": "you all", "y'all'd": "you all would","y'all'd've": "you all would have","y'all're": "you all are","y'all've": "you all have", "you'd": "you would", "you'd've": "you would have", "you'll": "you will", "you'll've": "you will have", "you're": "you are", "you've": "you have"}
    sentence = sentence.lower()
    sentence = BeautifulSoup(sentence,"lxml").text # html 태그 제거
    sentence = re.sub(r'\([^)]*\)',' ', sentence) # 괄호로 닫힌 문자열 제거
    sentence = re.sub('"','', sentence)
    sentence = ' '.join([contractions[t] if t in contractions else t for t in sentence.split(" ")]) #약어의 정규화
    sentence = re.sub(r"'s\b",'', sentence) # 's 소유격 제거
    sentence = re.sub("[^a-zA-Z]",' ', sentence) # 영어 제외 문자 공백으로 변환
    sentence = re.sub('[m]{2,}','mm', sentence) # m이 3개 이상이면 2개로 변경 감탄사랑 관련 있는듯 음....같은거
    

    if remove_stopwords:
        tokens = ' '.join(word for word in sentence.split() if not word in stop_words if len(word) > 1)
    else:
        tokens = ' '.join(word for word in sentence.split() if len(word) > 1)
    return tokens

def printlength(textdata, summarydata):
    text_len = [len(s.split()) for s in textdata]
    summary_len = [len(s.split()) for s in summarydata]
    
    print('텍스트의 최소 길이 : {}'.format(np.min(text_len)))
    print('텍스트의 최대 길이 : {}'.format(np.max(text_len)))
    print('텍스트의 평균 길이 : {}'.format(np.mean(text_len)))
    print('요약의 최소 길이 : {}'.format(np.min(summary_len)))
    print('요약의 최대 길이 : {}'.format(np.max(summary_len)))
    print('요약의 평균 길이 : {}'.format(np.mean(summary_len)))
    
    plt.subplot(1,2,1)
    plt.boxplot(summary_len)
    plt.title('Summary')
    plt.subplot(1,2,2)
    plt.title('Text')
    plt.tight_layout()
    plt.show()
    
    plt.title('Summary')
    plt.hist(summary_len, bins = 40)
    plt.xlabel('length of samples')
    plt.ylabel('number of samples')
    plt.show()
    
    plt.title('Text')
    plt.hist(summary_len, bins=40)
    plt.xlabel('length of samples')
    plt.ylabel('number of samples')
    plt.show()

    
np.random.seed(seed=0)
nltk.download('stopwords')

data= pd.read_csv("C:/Users/owner/Desktop/archive/Reviews.csv", nrows=100000)
print('전체 리뷰 개수 :',(len(data)))
data = data[['Text','Summary']]

print('Text  열에서 중복을 배제한 유일한 샘플의 수:', data['Text'].nunique())
print('Summary 열에서 중복을 배제한 유일한 샘플의 수:', data['Summary'].nunique())

data.drop_duplicates(subset=['Text'], inplace=True) # Text 열에서 중복인 내용 삭제
print("전체 샘플 수 : ", len(data))

print(data.isnull().sum())

data.dropna(axis=0, inplace=True) # NULL 샘플 제거
print('전체 샘플 수 : ',(len(data)))

stop_words = set(stopwords.words('english'))
print("불용어 개수 :", len(stop_words))
print(stop_words)

temp_text = 'Everything I bought was great, infact I ordered twice and the third ordered was<br />for my mother and father'
temp_summary = 'Great way to start (or finish) the day!!!'
print(preprocess_sentence(temp_text))
print(preprocess_sentence(temp_summary,0))

clean_text = []
for s in data['Text']:
    clean_text.append(preprocess_sentence(s))
clean_text[:5]

clean_summary = []
for s in data['Summary']:
    clean_summary.append(preprocess_sentence(s, 0))
clean_summary[:5]

data['Text'] = clean_text
data['Summary'] = clean_summary

data.replace('', np.nan, inplace=True) # 이거는 길이가 공백이면 NULL 값으로 바꾸는거임
print(data.isnull().sum())

data.dropna(axis = 0, inplace = True)
print('전체 샘플수 :',(len(data)))

printlength(data['Text'], data['Summary'])

#여기서 부터는 길이 분포 출력임
"""
text_len = [len(s.split()) for s in data['Text']]
summary_len = [len(s.split()) for s in data['Summary']]

print('텍스트의 최소 길이 : {}'.format(np.min(text_len)))
print('텍스트의 최대 길이 : {}'.format(np.max(text_len)))
print('텍스트의 평균 길이 : {}'.format(np.mean(text_len)))
print('요약의 최소 길이 : {}'.format(np.min(summary_len)))
print('요약의 최대 길이 : {}'.format(np.max(summary_len)))
print('요약의 평균 길이 : {}'.format(np.mean(summary_len)))

plt.subplot(1,2,1)
plt.boxplot(summary_len)
plt.title('Summary')
plt.subplot(1,2,2)
plt.title('Text')
plt.tight_layout()
plt.show()

plt.title('Summary')
plt.hist(summary_len, bins = 40)
plt.xlabel('length of samples')
plt.ylabel('number of samples')
plt.show()

plt.title('Text')
plt.hist(summary_len, bins=40)
plt.xlabel('length of samples')
plt.ylabel('number of samples')
plt.show()
"""





